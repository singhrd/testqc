import { ElementRef, OnInit, AfterViewInit, AfterContentInit, AfterViewChecked, OnDestroy, Renderer2, EventEmitter, ChangeDetectorRef, TemplateRef, QueryList } from '@angular/core';
import { AnimationEvent } from '@angular/animations';
import { SelectItem } from 'primeng/api';
import { ControlValueAccessor } from '@angular/forms';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
import * as ɵngcc2 from 'primeng/api';
import * as ɵngcc3 from '@angular/cdk/scrolling';
import * as ɵngcc4 from 'primeng/tooltip';
export declare const MULTISELECT_VALUE_ACCESSOR: any;
export declare class MultiSelectItem {
    option: any;
    selected: boolean;
    disabled: boolean;
    visible: boolean;
    itemSize: number;
    template: TemplateRef<any>;
    maxSelectionLimitReached: boolean;
    onClick: EventEmitter<any>;
    onKeydown: EventEmitter<any>;
    onOptionClick(event: Event): void;
    onOptionKeydown(event: Event): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MultiSelectItem>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<MultiSelectItem, "p-multiSelectItem", never, {
    "option": "option";
    "selected": "selected";
    "disabled": "disabled";
    "visible": "visible";
    "itemSize": "itemSize";
    "template": "template";
    "maxSelectionLimitReached": "maxSelectionLimitReached";
}, {
    "onClick": "onClick";
    "onKeydown": "onKeydown";
}, never>;
}
export declare class MultiSelect implements OnInit, AfterViewInit, AfterContentInit, AfterViewChecked, OnDestroy, ControlValueAccessor {
    el: ElementRef;
    renderer: Renderer2;
    private cd;
    scrollHeight: string;
    _defaultLabel: string;
    defaultLabel: string;
    style: any;
    styleClass: string;
    panelStyle: any;
    panelStyleClass: string;
    inputId: string;
    disabled: boolean;
    readonly: boolean;
    filter: boolean;
    filterPlaceHolder: string;
    filterLocale: string;
    overlayVisible: boolean;
    tabindex: number;
    appendTo: any;
    dataKey: string;
    name: string;
    ariaLabelledBy: string;
    displaySelectedLabel: boolean;
    maxSelectedLabels: number;
    selectionLimit: number;
    selectedItemsLabel: string;
    showToggleAll: boolean;
    emptyFilterMessage: string;
    resetFilterOnHide: boolean;
    dropdownIcon: string;
    optionLabel: string;
    showHeader: boolean;
    autoZIndex: boolean;
    baseZIndex: number;
    filterBy: string;
    virtualScroll: boolean;
    itemSize: number;
    showTransitionOptions: string;
    hideTransitionOptions: string;
    ariaFilterLabel: string;
    filterMatchMode: string;
    tooltip: string;
    tooltipPosition: string;
    tooltipPositionStyle: string;
    tooltipStyleClass: string;
    autofocusFilter: boolean;
    containerViewChild: ElementRef;
    filterInputChild: ElementRef;
    footerFacet: any;
    headerFacet: any;
    templates: QueryList<any>;
    onChange: EventEmitter<any>;
    onFocus: EventEmitter<any>;
    onBlur: EventEmitter<any>;
    onClick: EventEmitter<any>;
    onPanelShow: EventEmitter<any>;
    onPanelHide: EventEmitter<any>;
    value: any[];
    onModelChange: Function;
    onModelTouched: Function;
    overlay: HTMLDivElement;
    valuesAsString: string;
    focus: boolean;
    filled: boolean;
    documentClickListener: any;
    selfClick: boolean;
    panelClick: boolean;
    filterValue: string;
    visibleOptions: SelectItem[];
    disabledSelectedOptions: SelectItem[];
    filtered: boolean;
    itemTemplate: TemplateRef<any>;
    selectedItemsTemplate: TemplateRef<any>;
    headerCheckboxFocus: boolean;
    _options: any[];
    maxSelectionLimitReached: boolean;
    documentResizeListener: any;
    preventModelTouched: boolean;
    constructor(el: ElementRef, renderer: Renderer2, cd: ChangeDetectorRef);
    options: any[];
    ngOnInit(): void;
    ngAfterContentInit(): void;
    ngAfterViewInit(): void;
    ngAfterViewChecked(): void;
    writeValue(value: any): void;
    checkSelectionLimit(): void;
    updateFilledState(): void;
    registerOnChange(fn: Function): void;
    registerOnTouched(fn: Function): void;
    setDisabledState(val: boolean): void;
    onOptionClick(event: any): void;
    isSelected(value: any): boolean;
    findSelectionIndex(val: any): number;
    toggleAll(event: Event): void;
    isAllChecked(): boolean;
    isAllVisibleOptionsChecked(): boolean;
    getEnabledOptionCount(): number;
    setDisabledSelectedOptions(): void;
    show(): void;
    onOverlayAnimationStart(event: AnimationEvent): void;
    appendOverlay(): void;
    restoreOverlayAppend(): void;
    alignOverlay(): void;
    hide(): void;
    close(event: any): void;
    onMouseclick(event: any, input: any): void;
    onInputFocus(event: any): void;
    onInputBlur(event: any): void;
    onOptionKeydown(event: any): void;
    findNextItem(item: any): any;
    findPrevItem(item: any): any;
    onKeydown(event: KeyboardEvent): void;
    updateLabel(): void;
    findLabelByValue(val: any): string;
    onFilter(): void;
    activateFilter(): void;
    isItemVisible(option: SelectItem): boolean;
    getVisibleOptions(): SelectItem[];
    onHeaderCheckboxFocus(): void;
    onHeaderCheckboxBlur(): void;
    bindDocumentClickListener(): void;
    unbindDocumentClickListener(): void;
    bindDocumentResizeListener(): void;
    unbindDocumentResizeListener(): void;
    onWindowResize(): void;
    onOverlayHide(): void;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MultiSelect>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<MultiSelect, "p-multiSelect", never, {
    "scrollHeight": "scrollHeight";
    "filter": "filter";
    "displaySelectedLabel": "displaySelectedLabel";
    "maxSelectedLabels": "maxSelectedLabels";
    "selectedItemsLabel": "selectedItemsLabel";
    "showToggleAll": "showToggleAll";
    "emptyFilterMessage": "emptyFilterMessage";
    "resetFilterOnHide": "resetFilterOnHide";
    "dropdownIcon": "dropdownIcon";
    "showHeader": "showHeader";
    "autoZIndex": "autoZIndex";
    "baseZIndex": "baseZIndex";
    "filterBy": "filterBy";
    "showTransitionOptions": "showTransitionOptions";
    "hideTransitionOptions": "hideTransitionOptions";
    "filterMatchMode": "filterMatchMode";
    "tooltip": "tooltip";
    "tooltipPosition": "tooltipPosition";
    "tooltipPositionStyle": "tooltipPositionStyle";
    "autofocusFilter": "autofocusFilter";
    "defaultLabel": "defaultLabel";
    "options": "options";
    "disabled": "disabled";
    "overlayVisible": "overlayVisible";
    "style": "style";
    "styleClass": "styleClass";
    "panelStyle": "panelStyle";
    "panelStyleClass": "panelStyleClass";
    "inputId": "inputId";
    "readonly": "readonly";
    "filterPlaceHolder": "filterPlaceHolder";
    "filterLocale": "filterLocale";
    "tabindex": "tabindex";
    "appendTo": "appendTo";
    "dataKey": "dataKey";
    "name": "name";
    "ariaLabelledBy": "ariaLabelledBy";
    "selectionLimit": "selectionLimit";
    "optionLabel": "optionLabel";
    "virtualScroll": "virtualScroll";
    "itemSize": "itemSize";
    "ariaFilterLabel": "ariaFilterLabel";
    "tooltipStyleClass": "tooltipStyleClass";
}, {
    "onChange": "onChange";
    "onFocus": "onFocus";
    "onBlur": "onBlur";
    "onClick": "onClick";
    "onPanelShow": "onPanelShow";
    "onPanelHide": "onPanelHide";
}, ["footerFacet", "headerFacet", "templates"]>;
}
export declare class MultiSelectModule {
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<MultiSelectModule, [typeof MultiSelect, typeof MultiSelectItem], [typeof ɵngcc1.CommonModule, typeof ɵngcc2.SharedModule, typeof ɵngcc3.ScrollingModule, typeof ɵngcc4.TooltipModule], [typeof MultiSelect, typeof ɵngcc2.SharedModule, typeof ɵngcc3.ScrollingModule]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<MultiSelectModule>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXVsdGlzZWxlY3QuZC50cyIsInNvdXJjZXMiOlsibXVsdGlzZWxlY3QuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7O0FBSUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBYUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBaUlBOzs7O0FBRUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFbGVtZW50UmVmLCBPbkluaXQsIEFmdGVyVmlld0luaXQsIEFmdGVyQ29udGVudEluaXQsIEFmdGVyVmlld0NoZWNrZWQsIE9uRGVzdHJveSwgUmVuZGVyZXIyLCBFdmVudEVtaXR0ZXIsIENoYW5nZURldGVjdG9yUmVmLCBUZW1wbGF0ZVJlZiwgUXVlcnlMaXN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBbmltYXRpb25FdmVudCB9IGZyb20gJ0Bhbmd1bGFyL2FuaW1hdGlvbnMnO1xuaW1wb3J0IHsgU2VsZWN0SXRlbSB9IGZyb20gJ3ByaW1lbmcvYXBpJztcbmltcG9ydCB7IENvbnRyb2xWYWx1ZUFjY2Vzc29yIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuZXhwb3J0IGRlY2xhcmUgY29uc3QgTVVMVElTRUxFQ1RfVkFMVUVfQUNDRVNTT1I6IGFueTtcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE11bHRpU2VsZWN0SXRlbSB7XG4gICAgb3B0aW9uOiBhbnk7XG4gICAgc2VsZWN0ZWQ6IGJvb2xlYW47XG4gICAgZGlzYWJsZWQ6IGJvb2xlYW47XG4gICAgdmlzaWJsZTogYm9vbGVhbjtcbiAgICBpdGVtU2l6ZTogbnVtYmVyO1xuICAgIHRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+O1xuICAgIG1heFNlbGVjdGlvbkxpbWl0UmVhY2hlZDogYm9vbGVhbjtcbiAgICBvbkNsaWNrOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBvbktleWRvd246IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIG9uT3B0aW9uQ2xpY2soZXZlbnQ6IEV2ZW50KTogdm9pZDtcbiAgICBvbk9wdGlvbktleWRvd24oZXZlbnQ6IEV2ZW50KTogdm9pZDtcbn1cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE11bHRpU2VsZWN0IGltcGxlbWVudHMgT25Jbml0LCBBZnRlclZpZXdJbml0LCBBZnRlckNvbnRlbnRJbml0LCBBZnRlclZpZXdDaGVja2VkLCBPbkRlc3Ryb3ksIENvbnRyb2xWYWx1ZUFjY2Vzc29yIHtcbiAgICBlbDogRWxlbWVudFJlZjtcbiAgICByZW5kZXJlcjogUmVuZGVyZXIyO1xuICAgIHByaXZhdGUgY2Q7XG4gICAgc2Nyb2xsSGVpZ2h0OiBzdHJpbmc7XG4gICAgX2RlZmF1bHRMYWJlbDogc3RyaW5nO1xuICAgIGRlZmF1bHRMYWJlbDogc3RyaW5nO1xuICAgIHN0eWxlOiBhbnk7XG4gICAgc3R5bGVDbGFzczogc3RyaW5nO1xuICAgIHBhbmVsU3R5bGU6IGFueTtcbiAgICBwYW5lbFN0eWxlQ2xhc3M6IHN0cmluZztcbiAgICBpbnB1dElkOiBzdHJpbmc7XG4gICAgZGlzYWJsZWQ6IGJvb2xlYW47XG4gICAgcmVhZG9ubHk6IGJvb2xlYW47XG4gICAgZmlsdGVyOiBib29sZWFuO1xuICAgIGZpbHRlclBsYWNlSG9sZGVyOiBzdHJpbmc7XG4gICAgZmlsdGVyTG9jYWxlOiBzdHJpbmc7XG4gICAgb3ZlcmxheVZpc2libGU6IGJvb2xlYW47XG4gICAgdGFiaW5kZXg6IG51bWJlcjtcbiAgICBhcHBlbmRUbzogYW55O1xuICAgIGRhdGFLZXk6IHN0cmluZztcbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgYXJpYUxhYmVsbGVkQnk6IHN0cmluZztcbiAgICBkaXNwbGF5U2VsZWN0ZWRMYWJlbDogYm9vbGVhbjtcbiAgICBtYXhTZWxlY3RlZExhYmVsczogbnVtYmVyO1xuICAgIHNlbGVjdGlvbkxpbWl0OiBudW1iZXI7XG4gICAgc2VsZWN0ZWRJdGVtc0xhYmVsOiBzdHJpbmc7XG4gICAgc2hvd1RvZ2dsZUFsbDogYm9vbGVhbjtcbiAgICBlbXB0eUZpbHRlck1lc3NhZ2U6IHN0cmluZztcbiAgICByZXNldEZpbHRlck9uSGlkZTogYm9vbGVhbjtcbiAgICBkcm9wZG93bkljb246IHN0cmluZztcbiAgICBvcHRpb25MYWJlbDogc3RyaW5nO1xuICAgIHNob3dIZWFkZXI6IGJvb2xlYW47XG4gICAgYXV0b1pJbmRleDogYm9vbGVhbjtcbiAgICBiYXNlWkluZGV4OiBudW1iZXI7XG4gICAgZmlsdGVyQnk6IHN0cmluZztcbiAgICB2aXJ0dWFsU2Nyb2xsOiBib29sZWFuO1xuICAgIGl0ZW1TaXplOiBudW1iZXI7XG4gICAgc2hvd1RyYW5zaXRpb25PcHRpb25zOiBzdHJpbmc7XG4gICAgaGlkZVRyYW5zaXRpb25PcHRpb25zOiBzdHJpbmc7XG4gICAgYXJpYUZpbHRlckxhYmVsOiBzdHJpbmc7XG4gICAgZmlsdGVyTWF0Y2hNb2RlOiBzdHJpbmc7XG4gICAgdG9vbHRpcDogc3RyaW5nO1xuICAgIHRvb2x0aXBQb3NpdGlvbjogc3RyaW5nO1xuICAgIHRvb2x0aXBQb3NpdGlvblN0eWxlOiBzdHJpbmc7XG4gICAgdG9vbHRpcFN0eWxlQ2xhc3M6IHN0cmluZztcbiAgICBhdXRvZm9jdXNGaWx0ZXI6IGJvb2xlYW47XG4gICAgY29udGFpbmVyVmlld0NoaWxkOiBFbGVtZW50UmVmO1xuICAgIGZpbHRlcklucHV0Q2hpbGQ6IEVsZW1lbnRSZWY7XG4gICAgZm9vdGVyRmFjZXQ6IGFueTtcbiAgICBoZWFkZXJGYWNldDogYW55O1xuICAgIHRlbXBsYXRlczogUXVlcnlMaXN0PGFueT47XG4gICAgb25DaGFuZ2U6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIG9uRm9jdXM6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIG9uQmx1cjogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgb25DbGljazogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgb25QYW5lbFNob3c6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIG9uUGFuZWxIaWRlOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICB2YWx1ZTogYW55W107XG4gICAgb25Nb2RlbENoYW5nZTogRnVuY3Rpb247XG4gICAgb25Nb2RlbFRvdWNoZWQ6IEZ1bmN0aW9uO1xuICAgIG92ZXJsYXk6IEhUTUxEaXZFbGVtZW50O1xuICAgIHZhbHVlc0FzU3RyaW5nOiBzdHJpbmc7XG4gICAgZm9jdXM6IGJvb2xlYW47XG4gICAgZmlsbGVkOiBib29sZWFuO1xuICAgIGRvY3VtZW50Q2xpY2tMaXN0ZW5lcjogYW55O1xuICAgIHNlbGZDbGljazogYm9vbGVhbjtcbiAgICBwYW5lbENsaWNrOiBib29sZWFuO1xuICAgIGZpbHRlclZhbHVlOiBzdHJpbmc7XG4gICAgdmlzaWJsZU9wdGlvbnM6IFNlbGVjdEl0ZW1bXTtcbiAgICBkaXNhYmxlZFNlbGVjdGVkT3B0aW9uczogU2VsZWN0SXRlbVtdO1xuICAgIGZpbHRlcmVkOiBib29sZWFuO1xuICAgIGl0ZW1UZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55PjtcbiAgICBzZWxlY3RlZEl0ZW1zVGVtcGxhdGU6IFRlbXBsYXRlUmVmPGFueT47XG4gICAgaGVhZGVyQ2hlY2tib3hGb2N1czogYm9vbGVhbjtcbiAgICBfb3B0aW9uczogYW55W107XG4gICAgbWF4U2VsZWN0aW9uTGltaXRSZWFjaGVkOiBib29sZWFuO1xuICAgIGRvY3VtZW50UmVzaXplTGlzdGVuZXI6IGFueTtcbiAgICBwcmV2ZW50TW9kZWxUb3VjaGVkOiBib29sZWFuO1xuICAgIGNvbnN0cnVjdG9yKGVsOiBFbGVtZW50UmVmLCByZW5kZXJlcjogUmVuZGVyZXIyLCBjZDogQ2hhbmdlRGV0ZWN0b3JSZWYpO1xuICAgIG9wdGlvbnM6IGFueVtdO1xuICAgIG5nT25Jbml0KCk6IHZvaWQ7XG4gICAgbmdBZnRlckNvbnRlbnRJbml0KCk6IHZvaWQ7XG4gICAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQ7XG4gICAgbmdBZnRlclZpZXdDaGVja2VkKCk6IHZvaWQ7XG4gICAgd3JpdGVWYWx1ZSh2YWx1ZTogYW55KTogdm9pZDtcbiAgICBjaGVja1NlbGVjdGlvbkxpbWl0KCk6IHZvaWQ7XG4gICAgdXBkYXRlRmlsbGVkU3RhdGUoKTogdm9pZDtcbiAgICByZWdpc3Rlck9uQ2hhbmdlKGZuOiBGdW5jdGlvbik6IHZvaWQ7XG4gICAgcmVnaXN0ZXJPblRvdWNoZWQoZm46IEZ1bmN0aW9uKTogdm9pZDtcbiAgICBzZXREaXNhYmxlZFN0YXRlKHZhbDogYm9vbGVhbik6IHZvaWQ7XG4gICAgb25PcHRpb25DbGljayhldmVudDogYW55KTogdm9pZDtcbiAgICBpc1NlbGVjdGVkKHZhbHVlOiBhbnkpOiBib29sZWFuO1xuICAgIGZpbmRTZWxlY3Rpb25JbmRleCh2YWw6IGFueSk6IG51bWJlcjtcbiAgICB0b2dnbGVBbGwoZXZlbnQ6IEV2ZW50KTogdm9pZDtcbiAgICBpc0FsbENoZWNrZWQoKTogYm9vbGVhbjtcbiAgICBpc0FsbFZpc2libGVPcHRpb25zQ2hlY2tlZCgpOiBib29sZWFuO1xuICAgIGdldEVuYWJsZWRPcHRpb25Db3VudCgpOiBudW1iZXI7XG4gICAgc2V0RGlzYWJsZWRTZWxlY3RlZE9wdGlvbnMoKTogdm9pZDtcbiAgICBzaG93KCk6IHZvaWQ7XG4gICAgb25PdmVybGF5QW5pbWF0aW9uU3RhcnQoZXZlbnQ6IEFuaW1hdGlvbkV2ZW50KTogdm9pZDtcbiAgICBhcHBlbmRPdmVybGF5KCk6IHZvaWQ7XG4gICAgcmVzdG9yZU92ZXJsYXlBcHBlbmQoKTogdm9pZDtcbiAgICBhbGlnbk92ZXJsYXkoKTogdm9pZDtcbiAgICBoaWRlKCk6IHZvaWQ7XG4gICAgY2xvc2UoZXZlbnQ6IGFueSk6IHZvaWQ7XG4gICAgb25Nb3VzZWNsaWNrKGV2ZW50OiBhbnksIGlucHV0OiBhbnkpOiB2b2lkO1xuICAgIG9uSW5wdXRGb2N1cyhldmVudDogYW55KTogdm9pZDtcbiAgICBvbklucHV0Qmx1cihldmVudDogYW55KTogdm9pZDtcbiAgICBvbk9wdGlvbktleWRvd24oZXZlbnQ6IGFueSk6IHZvaWQ7XG4gICAgZmluZE5leHRJdGVtKGl0ZW06IGFueSk6IGFueTtcbiAgICBmaW5kUHJldkl0ZW0oaXRlbTogYW55KTogYW55O1xuICAgIG9uS2V5ZG93bihldmVudDogS2V5Ym9hcmRFdmVudCk6IHZvaWQ7XG4gICAgdXBkYXRlTGFiZWwoKTogdm9pZDtcbiAgICBmaW5kTGFiZWxCeVZhbHVlKHZhbDogYW55KTogc3RyaW5nO1xuICAgIG9uRmlsdGVyKCk6IHZvaWQ7XG4gICAgYWN0aXZhdGVGaWx0ZXIoKTogdm9pZDtcbiAgICBpc0l0ZW1WaXNpYmxlKG9wdGlvbjogU2VsZWN0SXRlbSk6IGJvb2xlYW47XG4gICAgZ2V0VmlzaWJsZU9wdGlvbnMoKTogU2VsZWN0SXRlbVtdO1xuICAgIG9uSGVhZGVyQ2hlY2tib3hGb2N1cygpOiB2b2lkO1xuICAgIG9uSGVhZGVyQ2hlY2tib3hCbHVyKCk6IHZvaWQ7XG4gICAgYmluZERvY3VtZW50Q2xpY2tMaXN0ZW5lcigpOiB2b2lkO1xuICAgIHVuYmluZERvY3VtZW50Q2xpY2tMaXN0ZW5lcigpOiB2b2lkO1xuICAgIGJpbmREb2N1bWVudFJlc2l6ZUxpc3RlbmVyKCk6IHZvaWQ7XG4gICAgdW5iaW5kRG9jdW1lbnRSZXNpemVMaXN0ZW5lcigpOiB2b2lkO1xuICAgIG9uV2luZG93UmVzaXplKCk6IHZvaWQ7XG4gICAgb25PdmVybGF5SGlkZSgpOiB2b2lkO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG59XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBNdWx0aVNlbGVjdE1vZHVsZSB7XG59XG4iXX0=